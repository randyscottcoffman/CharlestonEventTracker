{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInputs.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/MyDateInput.tsx","app/common/form/MySelectInputs.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/layout/LoadingComponent.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","URLSearchParams","toString","toISOString","entries","activitiesByDate","reduce","activities","format","ProfileStore","currentUserProfile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","setDisplayName","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","email","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","color","Header","attached","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","ProfileCard","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","attendeeborder","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInputs","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","MyDateInput","helpers","selected","setValue","MySelectInputs","Select","clearable","options","d","onBlur","setTouched","MyTextArea","categoryOptions","LoadingComponent","Dimmer","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","idth","PhotoWidgetDropZone","setFiles","dzStyles","borderColor","borderRadius","PaddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","floasted","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","verticleAlign","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","StrictMode","document","getElementById"],"mappings":"4XAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,gBAG0C,OAF1CC,cAE0C,EACtCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCRxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBnB,EAAakB,EAASF,QAAT,YAFS,uBAIxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJtC,kBAKjBkB,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACI,GACA,MAA0CA,EAAMJ,SAAxCnB,EAAR,EAAQA,KAAMwB,EAAd,EAAcA,OAAQX,EAAtB,EAAsBA,OAAQI,EAA9B,EAA8BA,QAC9B,OAAQO,GACJ,KAAK,IAID,GAHsB,QAAlBX,EAAOY,QAAoBzB,EAAK0B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb7B,EAAK0B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAO/B,EAAK0B,OACf1B,EAAK0B,OAAOK,IACZD,EAAiBD,KAAK7B,EAAK0B,OAAOK,IAG1C,MAAMD,EAAiBE,OAEvBC,IAAMV,MAAMvB,GAEhB,MACJ,KAAK,IACc,MAAXwB,GAAkBP,EAAQ,oBAAoBiB,WAAW,kCACzDnB,EAAMoB,UAAUC,SAChBH,IAAMV,MAAM,yCAEhB,MACJ,KAAK,IACDK,GAAQC,KAAK,cACb,MACJ,KAAK,IACDd,EAAMC,YAAYqB,eAAerC,GACjC4B,GAAQC,KAAK,iBAGrB,OAAOS,QAAQC,OAAOhB,MAG1B,IAAMiB,EAAe,SAAIrB,GAAJ,OAAmCA,EAASnB,MAE3DyC,EACG,SAAIC,GAAJ,OAAoBpC,IAAMqC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BvC,IAAMwC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BvC,IAAMyC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBpC,IAAM0C,OAAUN,GAAKE,KAAKJ,IA+CxCS,EAND,CACVC,WAvCe,CACfC,KAAM,SAACC,GAAD,OAA6B9C,IAAMqC,IAAiC,cAAe,CAAES,WACtFR,KAAKJ,IACVa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MAiCxEK,QA9BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,IAC7EE,QAAS,SAACC,GAAD,OAAyBxB,EAAA,uCACcwB,GAAe,KAC/DC,aAAc,kBAAMzB,EAAoB,wBAAyB,MAyBjE0B,SAtBa,CACbxB,IAAK,SAACyB,GAAD,OAAsB3B,EAAA,oBAAmC2B,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjBhE,IAAMwC,KAAY,SAAUyB,EAAU,CACzCtD,QAAS,CAAE,eAAgB,0BAGnCyD,aAAc,SAACpB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEqB,YAAa,SAACrB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDsB,cAAe,SAACC,GAAD,OAA+BpC,EAAA,YAA0BoC,IACxEC,gBAAiB,SAACV,GAAD,OAAsB3B,EAAA,kBAAyB2B,GAAY,KAC5EW,eAAgB,SAACX,EAAkBY,GAAnB,OACZvC,EAAA,kBAAmC2B,EAAnC,sBAAyDY,KAC7DC,eAAgB,SAACb,EAAkBY,GAAnB,OACZvC,EAAA,oBAA0C2B,EAA1C,iCAA2EY,OC7FtEE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAOnF,KAAMiF,IAIfG,EAST,WAAY9B,GAAgC,yBAR5CF,QAAciC,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRrC,IACAtD,KAAKoD,GAAKE,EAASF,GACnBpD,KAAKsF,MAAQhC,EAASgC,MACtBtF,KAAKuF,SAAWjC,EAASiC,SACzBvF,KAAKwF,YAAclC,EAASkC,YAC5BxF,KAAKyF,KAAOnC,EAASmC,KACrBzF,KAAK0F,KAAOpC,EAASoC,KACrB1F,KAAK2F,MAAQrC,EAASqC,Q,SC5BrBC,EACT,WAAYhC,GAAa,oBACrB5D,KAAKkE,SAAWN,EAAKM,SACrBlE,KAAK6F,YAAcjC,EAAKiC,YACxB7F,KAAK8F,MAAQlC,EAAKkC,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdtG,WAAgC,KAIlB,KAHduG,aAAe,IAAIrG,EAGL,KAFd6E,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAiBdC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAlBV,KAmCdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAO7E,GACf,cAARA,GAAqB,EAAKiD,UAAUhC,OAAOjB,OAGvD,OAAQiD,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAUhC,OAAO,aACtB,EAAKgC,UAAUyB,IAAI,YAAaG,KAxD9B,KAsEdG,eAtEc,sBAsEG,4BAAA3F,EAAA,6DACb,EAAKmF,gBAAiB,EADT,kBAGYtD,EAAMC,WAAWC,KAAK,EAAK6D,aAHvC,QAGHC,EAHG,QAIFjH,KAAK8G,SAAQ,SAAAtD,GAChB,EAAK0D,YAAY1D,MAErB,EAAK2D,cAAcF,EAAOhH,YAC1B,EAAKmH,mBAAkB,GARd,kDAUTC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAXd,0DAtEH,KAqFdD,cAAgB,SAAClH,GACb,EAAKA,WAAaA,GAtFR,KAyFdsH,aAzFc,uCAyFC,WAAOjE,GAAP,eAAAlC,EAAA,2DACPoC,EAAW,EAAKgE,YAAYlE,IADrB,uBAGP,EAAK8C,iBAAmB5C,EAHjB,kBAIAA,GAJA,cAMP,EAAK+C,gBAAiB,EANf,mBAQctD,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAK0D,YAAY1D,GACjBiE,aAAY,WACR,EAAKrB,iBAAmB5C,KAE5B,EAAK4D,mBAAkB,GAbpB,kBAcI5D,GAdJ,kCAgBH6D,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAjBpB,0DAzFD,2DA+GNF,YAAc,SAAC1D,GACnB,IACU,EADJM,EAAO/C,EAAMoB,UAAU2B,KACzBA,IACAN,EAASkE,QAAUlE,EAASmE,UAAWC,MACnC,SAAAxG,GAAC,OAAIA,EAAEgD,WAAaN,EAAKM,YAE7BZ,EAASqE,OAASrE,EAASsE,eAAiBhE,EAAKM,SACjDZ,EAASuE,KAAT,UAAgBvE,EAASmE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE7D,WAAaZ,EAASsE,iBAE1EtE,EAASmC,KAAO,IAAIuC,KAAK1E,EAASmC,MAClC,EAAKO,iBAAiBO,IAAIjD,EAASF,GAAIE,IAzH7B,KA4HNgE,YAAc,SAAClE,GACnB,OAAO,EAAK4C,iBAAiBvD,IAAIW,IA7HvB,KAgId8D,kBAAoB,SAACe,GACjB,EAAK5B,eAAiB4B,GAjIZ,KAoIdC,eApIc,uCAoIG,WAAO5E,GAAP,mBAAApC,EAAA,6DACP0C,EAAO/C,EAAMoB,UAAU2B,KACvBuE,EAAW,IAAIvC,EAAQhC,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH8E,EAAc,IAAIpD,EAAS1B,IACrBsE,aAAehE,EAAMM,SACjCkE,EAAYX,UAAY,CAACU,GACzB,EAAKnB,YAAYoB,GACjBb,aAAY,WACR,EAAKrB,iBAAmBkC,KAVnB,kDAaTjB,QAAQC,IAAR,MAbS,0DApIH,2DAqJdiB,eArJc,uCAqJG,WAAO/E,GAAP,SAAApC,EAAA,+EAEH6B,EAAMC,WAAWO,OAAOD,GAFrB,OAGTiE,aAAY,WACR,GAAIjE,EAASF,GAAI,CACb,IAAIkF,EAAe,2BAAO,EAAKhB,YAAYhE,EAASF,KAAQE,GAC5D,EAAK0C,iBAAiBO,IAAIjD,EAASF,GAAIkF,GACvC,EAAKpC,iBAAmBoC,MAPvB,+CAWTnB,QAAQC,IAAR,MAXS,wDArJH,2DAoKdmB,eApKc,uCAoKG,WAAOnF,GAAP,SAAAlC,EAAA,6DACb,EAAKkF,SAAU,EADF,kBAGHrD,EAAMC,WAAWF,OAAOM,GAHrB,OAITmE,aAAY,WACR,EAAKvB,iBAAiBlD,OAAOM,GAC7B,EAAKgD,SAAU,KANV,gDASTe,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKnB,SAAU,KAXV,yDApKH,2DAoLdoC,iBApLc,sBAoLK,4BAAAtH,EAAA,6DACT0C,EAAO/C,EAAMoB,UAAU2B,KAC7B,EAAKwC,SAAU,EAFA,kBAILrD,EAAMC,WAAWQ,OAAO,EAAK0C,iBAAkB9C,IAJ1C,OAKXmE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBsB,QAAS,CAAC,IAAD,EAChC,EAAKtB,iBAAiBuB,UAAtB,UACI,EAAKvB,iBAAiBuB,iBAD1B,aACI,EAAiCgB,QAAO,SAAAvH,GAAC,OAAIA,EAAEgD,YAAF,OAAeN,QAAf,IAAeA,OAAf,EAAeA,EAAMM,aACtE,EAAKgC,iBAAiBsB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIvC,EAAQhC,GAC7B,YAAKsC,wBAAL,mBAAuBuB,iBAAvB,SAAkC9F,KAAKwG,GACvC,EAAKjC,iBAAkBsB,SAAU,EAErC,EAAKxB,iBAAiBO,IAAI,EAAKL,iBAAkB9C,GAAI,EAAK8C,qBAfnD,gDAkBXiB,QAAQC,IAAR,MAlBW,yBAoBXG,aAAY,kBAAM,EAAKnB,SAAU,KApBtB,4EApLL,KA4MdsC,qBA5Mc,sBA4MS,sBAAAxH,EAAA,6DACnB,EAAKkF,SAAU,EADI,kBAGTrD,EAAMC,WAAWQ,OAAO,EAAK0C,iBAAkB9C,IAHtC,OAIfmE,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkByC,cAAc,UAAC,EAAKzC,wBAAN,aAAC,EAAuByC,aAC7D,EAAK3C,iBAAiBO,IAAI,EAAKL,iBAAkB9C,GAAI,EAAK8C,qBAN/C,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAKnB,SAAU,KAXlB,4EA5MT,KA2NdwC,wBAA0B,SAAC1E,GACvB,EAAK8B,iBAAiBY,SAAQ,SAAAtD,GAC1BA,EAASmE,UAAUb,SAAQ,SAAAuB,GACnBA,EAASjE,WAAaA,IACtBiE,EAASU,UAAYV,EAASW,iBAAmBX,EAASW,iBAC1DX,EAASU,WAAaV,EAASU,kBAhOjC,KAsOdE,sBAAwB,WACpB,EAAK7C,sBAAmBb,GAtOxB2D,YAAmBhJ,MACnBiJ,aACI,kBAAM,EAAKnE,UAAUoE,UACrB,WACI,EAAK5C,aAAe,IAAIrG,EACxB,EAAK+F,iBAAiBmD,QACtB,EAAKtC,oB,kDAKjB,WACI,OAAOuC,MAAMC,KAAKrJ,KAAKgG,iBAAiBsD,UAAUC,MAAK,SAACrI,EAAGsI,GAAJ,OACnDtI,EAAEuE,KAAMgE,UAAYD,EAAE/D,KAAMgE,e,uBAOpC,WACI,IAAMvG,EAAS,IAAIwG,gBAUnB,OATAxG,EAAOqB,OAAO,aAAcvE,KAAKsG,aAAapG,WAAWyJ,YACzDzG,EAAOqB,OAAO,WAAYvE,KAAKsG,aAAanG,SAASwJ,YACrD3J,KAAK8E,UAAU8B,SAAQ,SAACF,EAAO7E,GACf,cAARA,EACAqB,EAAOqB,OAAO1C,EAAM6E,EAAekD,eAEnC1G,EAAOqB,OAAO1C,EAAK6E,MAGpBxD,I,6BA4BX,WACI,OAAOgC,OAAO2E,QACV7J,KAAK8J,iBAAiBC,QAAO,SAACC,EAAY1G,GACtC,IAAMmC,EAAOwE,kBAAO3G,EAASmC,KAAO,eAEpC,OADAuE,EAAWvE,GAAQuE,EAAWvE,GAAX,sBAAuBuE,EAAWvE,IAAlC,CAAyCnC,IAAY,CAACA,GAClE0G,IACR,S,cC/EME,E,WAajB,aAAe,IAAD,gCAZdC,mBAAqC,KAYvB,KAXdxF,QAA0B,KAWZ,KAVdyF,gBAAiB,EAUH,KATdC,WAAY,EASE,KARdjE,SAAU,EAQI,KAPdkE,WAAwB,GAOV,KANdC,mBAAoB,EAMN,KALdC,UAAoB,EAKN,KAJdC,eAAiC,GAInB,KAHdC,mBAAoB,EAGN,KAedC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAhBP,KA0BdI,YA1Bc,uCA0BA,WAAO1G,GAAP,eAAAhD,EAAA,6DACV,EAAKkJ,gBAAiB,EADZ,kBAGgBrH,EAAMkB,SAASxB,IAAIyB,GAHnC,OAGAS,EAHA,OAIN4C,aAAY,WACR,EAAK5C,QAAUA,EACf,EAAKyF,gBAAiB,KANpB,gDASNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA1BA,2DAwCdjG,YAxCc,uCAwCA,WAAOC,GAAP,iBAAAlD,EAAA,6DACV,EAAKmJ,WAAY,EADP,kBAGiBtH,EAAMkB,SAASE,YAAYC,GAH5C,OAGAnD,EAHA,OAIA4J,EAAQ5J,EAASnB,KACvByH,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,YAAKA,QAAQmG,cAAb,SAAqBnJ,KAAKkJ,GACtBA,EAAME,QAAUlK,EAAMoB,UAAU2B,OAChC/C,EAAMoB,UAAU+I,SAASH,EAAMrI,KAC/B,EAAKmC,QAAQmB,MAAQ+E,EAAMrI,MAGnC,EAAK6H,WAAY,KAbf,gDAgBNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,WAAY,KAjB7B,yDAxCA,2DA6Dd7F,aA7Dc,uCA6DC,WAAOqG,GAAP,SAAA3J,EAAA,6DACX,EAAKkF,SAAU,EADJ,kBAGDrD,EAAMkB,SAASO,aAAaqG,EAAMzH,IAHjC,OAIPvC,EAAMoB,UAAU+I,SAASH,EAAMrI,KAC/B+E,aAAY,WACJ,EAAK5C,SAAW,EAAKA,QAAQmG,SAC7B,EAAKnG,QAAQmG,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKpG,QAAQmG,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAE7H,KAAOyH,EAAMzH,MAAK2H,QAAS,EAC3D,EAAKpG,QAAQmB,MAAQ+E,EAAMrI,IAC3B,EAAK4D,SAAU,MAVhB,gDAcPmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAfO,yDA7DD,2DAgFd3C,YAhFc,uCAgFA,WAAOoG,GAAP,SAAA3J,EAAA,6DACV,EAAKkF,SAAU,EADL,kBAGArD,EAAMkB,SAASQ,YAAYoG,EAAMzH,IAHjC,OAINmE,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,EAAKA,QAAQmG,OAAb,UAAsB,EAAKnG,QAAQmG,cAAnC,aAAsB,EAAqBrC,QAAO,SAAAwC,GAAC,OAAIA,EAAE7H,KAAOyH,EAAMzH,MACtE,EAAKgD,SAAU,MAPjB,gDAWNmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAZM,yDAhFA,2DAgGdxC,gBAhGc,uCAgGI,WAAOV,EAAkB2E,GAAzB,SAAA3H,EAAA,6DACd,EAAKkF,SAAU,EADD,kBAGJrD,EAAMkB,SAASW,gBAAgBV,GAH3B,OAIVrD,EAAMqK,cAActC,wBAAwB1E,GAE5CqD,aAAY,WAAO,IAAD,IACV,EAAK5C,SAAW,EAAKA,QAAQT,YAAb,UAA0BrD,EAAMoB,UAAU2B,YAA1C,aAA0B,EAAsBM,WAAY,EAAKS,QAAQT,WAAaA,IACtG2E,EAAY,EAAKlE,QAAQmE,iBAAmB,EAAKnE,QAAQmE,iBACzD,EAAKnE,QAAQkE,WAAa,EAAKlE,QAAQkE,WAEvC,EAAKlE,SAAW,EAAKA,QAAQT,YAAb,UAA0BrD,EAAMoB,UAAU2B,YAA1C,aAA0B,EAAsBM,YAChE2E,EAAY,EAAKlE,QAAQwG,iBAAmB,EAAKxG,QAAQwG,kBAE7D,EAAKb,WAAW1D,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQkE,UAAYlE,EAAQmE,iBAAmBnE,EAAQmE,iBACvDnE,EAAQkE,WAAalE,EAAQkE,cAGrC,EAAKzC,SAAU,KApBT,gDAuBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAxBvB,yDAhGJ,6DA4Hd1B,cA5Hc,uCA4HE,WAAOC,GAAP,SAAAzD,EAAA,6DACZ,EAAKkF,SAAU,EADH,kBAGFrD,EAAMkB,SAASS,cAAcC,GAH3B,OAIR4C,aAAY,WAAO,IAAD,EACV5C,EAAQkB,aAAelB,EAAQkB,eAAR,UAAwBhF,EAAMoB,UAAU2B,YAAxC,aAAwB,EAAsBiC,cACrEhF,EAAMoB,UAAUmJ,eAAezG,EAAQkB,aAE3C,EAAKlB,QAAL,2BAAmB,EAAKA,SAAYA,GACpC,EAAKyB,SAAU,KATX,gDAYRe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAbzB,yDA5HF,2DA6IdiF,eA7Ic,uCA6IG,WAAOvG,GAAP,eAAA5D,EAAA,6DACb,EAAKqJ,mBAAoB,EADZ,kBAGgBxH,EAAMkB,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHwF,EAHG,OAIT/C,aAAY,WACR,EAAK+C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTpD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgD,mBAAoB,KAVlC,yDA7IH,2DA2Jde,mBA3Jc,uCA2JO,WAAOpH,EAAkBY,GAAzB,eAAA5D,EAAA,6DACjB,EAAKwJ,mBAAoB,EADR,kBAGQ3H,EAAMkB,SAASc,eAAeb,EACxDY,GAJkB,OAGXkF,EAHW,OAKjBzC,aAAY,WACR,EAAKkD,eAAiBT,EACtB,EAAKU,mBAAoB,KAPZ,gDAUbvD,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKmD,mBAAoB,KAZhB,yDA3JP,wDACV1B,YAAmBhJ,MACnBiJ,aAAS,kBAAM,EAAKuB,aAChB,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM1F,EAA0B,IAAd0F,EAAkB,YAAc,YAClD,EAAKa,eAAevG,QAIpB,EAAKwF,WAAa,M,+CASlC,WACI,SAAIzJ,EAAMoB,UAAU2B,OAAQ5D,KAAK2E,UACtB9D,EAAMoB,UAAU2B,KAAKM,WAAalE,KAAK2E,QAAQT,a,KCjC7CqH,E,WAMjB,aAAe,IAAD,gCALd3H,KAAoB,KAKN,KAJd4H,cAA+B,KAIjB,KAHdC,WAAY,EAGE,KAFdC,yBAEc,OAQd/H,MARc,uCAQN,WAAOgI,GAAP,eAAAzK,EAAA,+EAEmB6B,EAAMU,QAAQE,MAAMgI,GAFvC,OAEM/H,EAFN,OAGA/C,EAAMC,YAAY8K,SAAShI,EAAKhD,OAChC,EAAKiL,uBAAuBjI,GAC5B2D,aAAY,kBAAM,EAAK3D,KAAOA,KAC9BlC,GAAQC,KAAK,eACbd,EAAMiL,WAAWC,aAPjB,uHARM,2DAqBd7J,OAAS,WACLrB,EAAMC,YAAY8K,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKtI,KAAO,KACZlC,GAAQC,KAAK,MAzBH,KA4BdwK,QA5Bc,sBA4BJ,4BAAAjL,EAAA,+EAEiB6B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGF/C,EAAMC,YAAY8K,SAAShI,EAAKhD,OAChC2G,aAAY,kBAAM,EAAK3D,KAAOA,KAC9B,EAAKiI,uBAAuBjI,GAL1B,gDAOFuD,QAAQC,IAAR,MAPE,yDA5BI,KAuCdvD,SAvCc,uCAuCH,WAAO8H,GAAP,SAAAzK,EAAA,+EAEG6B,EAAMU,QAAQI,SAAS8H,GAF1B,OAGHjK,GAAQC,KAAR,yCAA+CgK,EAAMS,QACrDvL,EAAMiL,WAAWC,aAJd,oHAvCG,2DAiDdf,SAAW,SAAClF,GACJ,EAAKlC,OAAM,EAAKA,KAAKkC,MAAQA,IAlDvB,KAqDdsF,eAAiB,SAACiB,GACV,EAAKzI,OAAM,EAAKA,KAAKiC,YAAcwG,IAtD7B,KAyDdC,uBAzDc,sBAyDW,sBAAApL,EAAA,sDACrB8K,OAAOO,GAAGC,gBAAe,SAAAvL,GACG,cAApBA,EAASK,SACT,EAAKkK,cAAgBvK,EAASwL,aAAa1I,gBAH9B,2CAzDX,KAiEd2I,cAAgB,WACZ,EAAKjB,WAAY,EACjB,IAAMkB,EAAW,SAAC5I,GACdhB,EAAMU,QAAQK,QAAQC,GAAarB,MAAK,SAAAkB,GACpC/C,EAAMC,YAAY8K,SAAShI,EAAKhD,OAChC,EAAKiL,uBAAuBjI,GAC5B2D,aAAY,WACR,EAAK3D,KAAOA,EACZ,EAAK6H,WAAY,KAErB/J,GAAQC,KAAK,kBACdiL,OAAM,SAAAvL,GACL8F,QAAQC,IAAI/F,GACZkG,aAAY,kBAAM,EAAKkE,WAAY,SAGvC,EAAKD,cACLmB,EAAS,EAAKnB,eAEdQ,OAAOO,GAAG5I,OAAM,SAAA1C,GACZ0L,EAAS1L,EAASwL,aAAa1I,eAChC,CAAC8I,MAAO,0BAtFL,KA0Fd7I,aA1Fc,sBA0FC,4BAAA9C,EAAA,6DACX,EAAK4L,wBADM,kBAGY/J,EAAMU,QAAQO,eAH1B,OAGDJ,EAHC,OAIP2D,aAAY,kBAAM,EAAK3D,KAAOA,KAC9B/C,EAAMC,YAAY8K,SAAShI,EAAKhD,OAChC,EAAKiL,uBAAuBjI,GANrB,kDAQPuD,QAAQC,IAAR,MARO,0DAzFX4B,YAAmBhJ,M,4CAGvB,WACI,QAASA,KAAK4D,O,oCAiGlB,SAA+BA,GAC3B,IAAMmJ,EAAW5L,KAAKC,MAAM4L,KAAKpJ,EAAKhD,MAAMqM,MAAM,KAAK,KAEjDC,EADU,IAAIlF,KAAoB,IAAf+E,EAASI,KACV1D,UAAYzB,KAAKoF,MAAS,IAClDpN,KAAK0L,oBAAsB2B,WAAWrN,KAAKgE,aAAckJ,K,mCAG7D,WACII,aAAatN,KAAK0L,yB,KC3GZ7K,EAAe,CACzBqK,cAAe,IAAInF,EACnBjF,YAAa,ICTb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuBoL,OAAOC,aAAasB,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAedrL,eAAiB,SAACd,GACd,EAAKA,MAAQA,GAhBH,KAmBduK,SAAW,SAAChL,GACR,EAAKA,MAAQA,GApBH,KAuBd6M,aAAe,WACX,EAAKD,WAAY,GAvBjBxE,YAAmBhJ,MAEnBiJ,aACI,kBAAM,EAAKrI,SACX,SAAAA,GACQA,EACAoL,OAAOC,aAAayB,QAAQ,MAAO9M,GAEnCoL,OAAOC,aAAaC,WAAW,WDC/CjK,UAAW,IAAIsJ,EACfO,WAAY,IENZ,aAAe,IAAD,gCALd6B,MAAe,CACXC,MAAM,EACNjL,KAAM,MAGI,KAIdkL,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMhL,KAAOmL,GANR,KASd/B,WAAa,WACT,EAAK4B,MAAMC,MAAO,EAClB,EAAKD,MAAMhL,KAAO,MAVlBqG,YAAmBhJ,OFMvB+N,aAAc,IAAI7D,EAClB8D,aAAc,IGZd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfvN,EAAMqK,cAAchF,mBACpB,EAAKgI,eAAgB,IAAIG,KACpBC,QAAQ/N,oBAAkD6N,EAAY,CACnEG,mBAAoB,kCAAM1N,EAAMoB,UAAU2B,YAAtB,aAAM,EAAsBhD,SAEnD4N,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQjC,OAAM,SAAAvL,GAAK,OAAI8F,QAAQC,IAAI,sCAAuC/F,MAE7F,EAAK6M,cAAcY,GAAG,gBAAgB,SAACb,GACnC1G,aAAY,WACR0G,EAASrH,SAAQ,SAAAmI,GACbA,EAAQC,UAAY,IAAIhH,KAAK+G,EAAQC,UAAY,QAErD,EAAKf,SAAWA,QAIxB,EAAKC,cAAcY,GAAG,kBAAkB,SAACC,GACrCxH,aAAY,WACRwH,EAAQC,UAAY,IAAIhH,KAAK+G,EAAQC,WACrC,EAAKf,SAASgB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKhB,qBAAL,SAAoBiB,OAAOvC,OAAM,SAAAvL,GAAK,OAAI8F,QAAQC,IAAI,8BAA+B/F,OAnC3E,KAsCd+N,cAAgB,WACZ,EAAKnB,SAAW,GAChB,EAAKiB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAO/F,GAAP,iBAAApI,EAAA,6DACToI,EAAO8E,WAAP,UAAoBvN,EAAMqK,cAAchF,wBAAxC,aAAoB,EAAsC9C,GADjD,4BAGC,EAAK8K,qBAHN,aAGC,EAAoBoB,OAAO,cAAehG,GAH3C,sDAKLnC,QAAQC,IAAR,MALK,wDA3CC,sDACV4B,YAAmBhJ,QHcduP,EAAeC,wBAAc3O,GAEnC,SAAS4O,IACZ,OAAOC,qBAAWH,G,WIrBPI,eAAS,WACpB,MAAwCF,IAAhCxN,UAAa2B,EAArB,EAAqBA,KAAM1B,EAA3B,EAA2BA,OAC3B,OACI,cAAC0N,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,OAAK,EAACC,GAAG,IAAIC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADjE,8BAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASE,GAAG,cAAc/D,KAAK,eAC9C,cAACuD,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASE,GAAG,kBAAkBO,UAAQ,EAAC7C,QAAQ,sBAE/D,eAAC8B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJ1M,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,QAAS,mBAAoBgL,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAEtN,QAAF,IAAEA,OAAF,EAAEA,EAAMiC,YAA1C,SACI,eAACmL,EAAA,EAASpB,KAAV,WACI,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMf,GAAE,2BAAexM,QAAf,IAAeA,OAAf,EAAeA,EAAMM,UAC5CgN,KAAK,aAAaE,KAAK,SAC3B,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAASnP,EAAQgP,KAAK,SAASE,KAAK,0B,8DCnBhEzB,eAAS,WACpB,MAAmDF,IAA5CvE,cAAgBpG,EAAvB,EAAuBA,UAAW2B,EAAlC,EAAkCA,aAClC,OACI,qCACI,eAACmJ,EAAA,EAAD,CAAM0B,UAAQ,EAACC,KAAK,QAAQf,MAAO,CAAEgB,MAAO,OAAQC,UAAW,GAAIC,MAAO,WAA1E,UACI,cAACC,EAAA,EAAD,CAAQP,KAAK,SAASQ,UAAQ,EAAC9D,QAAQ,YACvC,cAAC8B,EAAA,EAAKI,KAAN,CACIlC,QAAQ,gBACR+D,OAAQ/M,EAAUgN,IAAI,OACtBT,QAAS,kBAAM5K,EAAa,MAAO,WAEvC,cAACmJ,EAAA,EAAKI,KAAN,CACIlC,QAAQ,YACR+D,OAAQ/M,EAAUgN,IAAI,WACtBT,QAAS,kBAAM5K,EAAa,UAAW,WAE3C,cAACmJ,EAAA,EAAKI,KAAN,CACIlC,QAAQ,cACR+D,OAAQ/M,EAAUgN,IAAI,UACtBT,QAAS,kBAAM5K,EAAa,SAAU,cAG9C,cAACkL,EAAA,EAAD,IACA,cAAC,IAAD,CACII,SAAU,SAACtM,GAAD,OAAUgB,EAAa,YAAahB,IAC9CiB,MAAO5B,EAAUrC,IAAI,cAAgB,IAAIuF,a,2DCrB1C2H,gBAAS,YAAyC,IAAD,EAAjBhL,EAAiB,EAAjBA,QAC3C,EAAkC8K,IAA3B1B,EAAP,EAAOA,aAAc9L,EAArB,EAAqBA,UACd2C,EAA4BmJ,EAA5BnJ,gBAAiBwB,EAAW2H,EAAX3H,QAExB,IAAI,UAAAnE,EAAU2B,YAAV,eAAgBM,YAAaS,EAAQT,SAAU,OAAO,KAO1D,OACI,eAAC8N,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACA,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC3B,MAAO,CAACgB,MAAO,QAAvC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACL5B,MAAO,CAACkB,MAAO,WACf5D,QAASnJ,EAAQkE,UAAY,YAAc,oBAGnD,cAACmJ,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAC7B,MAAO,CAACgB,MAAO,QAAtC,SACI,cAACd,EAAA,EAAD,CACI4B,OAAK,EACLF,OAAK,EACLV,MAAO/M,EAAQkE,UAAY,MAAQ,QACnCiF,QAASnJ,EAAQkE,UAAY,WAAa,SAC1CzC,QAASA,EACTiL,QAAS,SAACkB,GAAD,OArBrB,SAAsBA,EAAmBrO,GACrCqO,EAAEC,iBACF7N,EAAQkE,UAAYjE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAmBzDuO,CAAaF,EAAG5N,EAAQT,qBC3BzC,SAASwO,GAAT,GAAwC,IAAlB/N,EAAiB,EAAjBA,QAMjC,OACI,eAACgO,GAAA,EAAD,WACI,cAAC9B,EAAA,EAAD,CAAOZ,GAAIkB,IAAMf,GAAE,oBAAezL,EAAQT,UAAYoM,IAAK3L,EAAQmB,OAAS,qBAC5E,eAAC6M,GAAA,EAAKT,QAAN,CAAcjC,GAAIkB,IAAMf,GAAE,oBAAezL,EAAQT,UAAjD,UACI,cAACyO,GAAA,EAAKhB,OAAN,UAAchN,EAAQkB,cACtB,cAAC8M,GAAA,EAAKC,YAAN,UAVZ,SAAkBC,GACd,GAAIA,EACA,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EAQjCG,CAASrO,EAAQsO,UAExC,eAACN,GAAA,EAAKT,QAAN,CAAcgB,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAM9G,KAAK,SACV1H,EAAQmE,eAFb,gBAIA,cAAC,GAAD,CAAcnE,QAASA,O,wBChBpBgL,gBAAS,YAAuD,IAApBlI,EAAmB,EAAnBA,UACjD2L,EAAS,CACXC,eAAgB,SAChBC,YAAa,GAEjB,OACI,eAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,UACK/L,EAAUgM,KAAI,SAAAtL,GAAQ,OACnB,cAACuL,GAAA,EAAD,CAAOC,WAAS,EAEZC,QACI,cAACL,GAAA,EAAKvD,KAAN,CAAmCC,GAAIkB,IAAMf,GAAE,oBAAejI,EAASjE,UAAvE,SACI,cAAC2M,EAAA,EAAD,CACIU,KAAK,OACLsC,UAAQ,EACRvD,IAAKnI,EAASrC,OAAS,mBACvBgO,UAAQ,EACRtD,MAAOrI,EAASU,UAAYuK,EAAS,QAN7BjL,EAASjE,UAHjC,SAcI,cAACwP,GAAA,EAAMxB,QAAP,UACI,cAACQ,GAAD,CAAa/N,QAASwD,OAdrBA,EAASjE,aAH1B,UCNO,SAAS6P,GAAT,GAA8C,IAAD,IAAlBzQ,EAAkB,EAAlBA,SAEtC,OACI,eAAC0Q,GAAA,EAAQC,MAAT,WACI,eAACD,GAAA,EAAD,WACK1Q,EAASqF,aACN,cAACuL,GAAA,EAAD,CAAOtC,SAAS,MAAMF,MAAM,MAAM5D,QAAQ,YAAY0C,MAAO,CAAC2D,UAAW,YAE7E,cAACnE,GAAA,EAAKiE,MAAN,UACI,eAACjE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYL,MAAO,CAAC4D,aAAc,GAAI7C,KAAK,OAAOsC,UAAQ,EAACvD,KAAK,UAAAhN,EAASuE,YAAT,eAAe/B,QAAQ,qBACvF,eAACkK,GAAA,EAAKkC,QAAN,WACI,cAAClC,GAAA,EAAK2B,OAAN,CAAa1B,GAAIkB,IAAMf,GAAE,sBAAiB9M,EAASF,IAAnD,SACKE,EAASgC,QAEd,eAAC0K,GAAA,EAAK4C,YAAN,wBAA4B,cAAC,IAAD,CAAMxC,GAAE,oBAAe9M,EAASsE,cAAhC,mBAAiDtE,EAASuE,YAA1D,aAAiD,EAAehC,iBAC/FvC,EAASqE,QACN,cAACqI,GAAA,EAAK4C,YAAN,UACI,cAACsB,GAAA,EAAD,CAAO5B,OAAK,EAACZ,MAAM,SAAnB,8CAKPpO,EAASkE,UAAYlE,EAASqE,QAC3B,cAACqI,GAAA,EAAK4C,YAAN,UACI,cAACsB,GAAA,EAAD,CAAO5B,OAAK,EAACZ,MAAM,SAAnB,0DASpB,cAACsC,GAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAM9G,KAAK,UAAUpC,kBAAO3G,EAASmC,KAAO,uBAC5C,cAAC0N,GAAA,EAAD,CAAM9G,KAAK,WAAW/I,EAASqC,WAGvC,cAACqO,GAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0B5M,UAAWnE,EAASmE,cAElD,eAACuM,GAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAOhR,EAASkC,cAChB,cAACkL,EAAA,EAAD,CACIT,GAAIkB,IACJf,GAAE,sBAAiB9M,EAASF,IAC5BoN,MAAO,CAACkB,MAAO,WACf6C,QAAQ,QACRzG,QAAQ,eCvDb6B,oBAAS,WACtB,IACQ6E,EADkB/E,IAAlBvE,cACAsJ,kBAER,OACE,mCACGA,EAAkBf,KAAI,mCAAEgB,EAAF,KAASzK,EAAT,YACrB,eAAC,WAAD,WACE,cAAC2H,EAAA,EAAD,CAAQ+C,KAAG,EAAClE,MAAO,CAACkB,MAAO,WAA3B,SACG+C,IAEFzK,EAAWyJ,KAAI,SAACnQ,GAAD,OACd,cAACyQ,GAAD,CAAoCzQ,SAAUA,GAAvBA,EAASF,SALrBqR,W,UCVR,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAaxC,OAAK,EAAC5B,MAAO,CAAEiB,UAAW,IAAvC,SACI,eAACuC,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASxD,MAAO,CAAEqE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYjD,OAAb,CAAoB7L,OAAK,EAAzB,UACI,cAAC8O,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,GAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,GAAA,EAAD,CAASK,WAAS,EAAC7D,MAAO,CAAEqE,UAAW,MACvC,cAACb,GAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAAC5D,EAAA,EAAD,CAAQsE,UAAQ,EAACtD,MAAM,OAAO6C,QAAQ,QAAQzG,QAAQ,kBCjB/D6B,oBAAS,WACpB,IAAQzE,EAAkBuE,IAAlBvE,cACArE,EAAkEqE,EAAlErE,eAAgBb,EAAkDkF,EAAlDlF,iBAAkBQ,EAAgC0E,EAAhC1E,gBAAiBzG,EAAemL,EAAfnL,WAC3D,EAAsCkV,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAJAC,qBAAU,WACFpP,EAAiBuL,MAAQ,GAAG1K,MACjC,CAACb,EAAiBuL,KAAM1K,IAGvB,eAACwO,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,SACKtG,EAAc7E,iBAAmB6O,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGA,cAAC,IAAD,CACIY,UAAW,EACXC,SArBxB,WACIL,GAAe,GACf3O,EAAgB,IAAIvG,EAAaF,EAAY0V,YAAc,IAC3D5O,IAAiBnE,MAAK,kBAAMyS,GAAe,OAmBvBO,SAAUR,KAAiBnV,GAAcA,EAAW0V,YAAc1V,EAAW4V,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAIhB,cAACP,EAAA,EAAKC,OAAN,CAAa9D,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACqE,EAAA,EAAD,CAAQhE,OAAQqD,Y,sCCrCjB,SAASY,GAAaC,GACjC,MAAsBC,aAASD,EAAM1J,MAArC,mBAAO4J,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY/U,MAAO6U,EAAKG,WAAaH,EAAK7U,MAA1C,UACI,gCAAQ0U,EAAMO,QACd,iDAAWL,GAAYF,IACtBG,EAAKG,SAAWH,EAAK7U,MAClB,cAAC6S,GAAA,EAAD,CAAO5B,OAAK,EAACZ,MAAM,MAAnB,SAA0BwE,EAAK7U,QAC/B,QCbDsO,oBAAS,WACtB,IAAQ1N,EAAcwN,IAAdxN,UACR,OACE,cAAC,KAAD,CACEsU,cAAe,CAAEnK,MAAO,GAAIoK,SAAU,GAAInV,MAAO,MACjDoV,SAAU,SAACnN,EAAD,OAAUoN,EAAV,EAAUA,UAAV,OAAyBzU,EAAU0B,MAAM2F,GAAQsD,OAAM,SAAAvL,GAAK,OAChEqV,EAAU,CAACrV,MAAO,kCAH1B,SAKG,gBAAGsV,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcpV,EAA/B,EAA+BA,OAA/B,OACC,eAAC,KAAD,CAAMqV,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACE,cAACnF,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,oCAAoC0C,MAAO,CAACkB,MAAO,WAAYyC,UAAU,WACjG,cAAC2B,GAAD,CAAczJ,KAAK,QAAQ0K,YAAY,UACvC,cAACjB,GAAD,CACEzJ,KAAK,WACL0K,YAAY,WACZC,KAAK,aAEP,cAAC,KAAD,CACE3K,KAAK,QAAQ4K,OAAQ,kBAAM,cAAC/C,GAAA,EAAD,CAAO1D,MAAO,CAAC4D,aAAc,IAAK9B,OAAK,EAACZ,MAAM,MAAM5D,QAAStM,EAAOH,WAEjG,cAACqP,EAAA,EAAD,CAAQtK,QAASwQ,EAAcjG,UAAQ,EAAC7C,QAAQ,QAAQkJ,KAAK,SAAS5E,OAAK,a,UCpBtE,SAAS8E,GAAT,GAA4C,IAAjB1V,EAAgB,EAAhBA,OACtC,OACI,cAAC2V,GAAA,EAAD,CAAS9V,OAAK,EAAd,SACKG,GACG,cAAC2V,GAAA,EAAQ5D,KAAT,UACK/R,EAAOiS,KAAI,SAAC2D,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQnH,KAAT,UAAuBoH,GAAJC,U,aCJ5B1H,gBAAS,WACtB,IAAQ1N,EAAcwN,IAAdxN,UACR,OACE,cAAC,KAAD,CACEsU,cAAe,CAAE1Q,YAAa,GAAI3B,SAAU,GAAIkI,MAAO,GAAIoK,SAAU,GAAInV,MAAO,MAChFoV,SAAU,SAACnN,EAAD,OAAUoN,EAAV,EAAUA,UAAV,OAAyBzU,EAAU4B,SAASyF,GAAQsD,OAAM,SAAAvL,GAAK,OACnEqV,EAAU,CAACrV,cACXiW,iBAAkBC,KAAW,CACzB1R,YAAa0R,OAAaC,WAC1BtT,SAAUqT,OAAaC,WACvBpL,MAAOmL,OAAaC,WAAWpL,QAC/BoK,SAAUe,OAAaC,aARnC,SAWG,gBAAGb,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcpV,EAA/B,EAA+BA,OAAQiW,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACC,eAAC,KAAD,CAAMb,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACE,cAACnF,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,sCAAsC0C,MAAO,CAACkB,MAAO,WAAYyC,UAAU,WACnG,cAAC2B,GAAD,CAAczJ,KAAK,cAAc0K,YAAY,iBAC7C,cAACjB,GAAD,CAAczJ,KAAK,WAAW0K,YAAY,aAC1C,cAACjB,GAAD,CAAczJ,KAAK,QAAQ0K,YAAY,UACvC,cAACjB,GAAD,CACEzJ,KAAK,WACL0K,YAAY,WACZC,KAAK,aAEP,cAAC,KAAD,CACE3K,KAAK,QAAQ4K,OAAQ,kBACrB,cAACC,GAAD,CAAkB1V,OAAQA,EAAOH,WAEnC,cAACqP,EAAA,EAAD,CAAQsE,UAAWyC,IAAYC,GAASd,EAAcxQ,QAASwQ,EAAcjG,UAAQ,EAAC7C,QAAQ,WAAWkJ,KAAK,SAAS5E,OAAK,aC9BvHzC,gBAAS,WACpB,MAAkCF,IAA1BxN,EAAR,EAAQA,UAAW6J,EAAnB,EAAmBA,WACnB,OACI,cAACkI,GAAA,EAAD,CAASnE,UAAQ,EAACsE,UAAU,SAAS7C,UAAQ,EAACuF,UAAU,WAAxD,SACI,eAAC9G,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACS,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACgB,EAAA,EAAD,CAAOU,KAAK,UAAUjB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE4D,aAAc,MADnF,8BAICnS,EAAU0V,WAGT,qCACE,cAAChG,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAC/B,QAAQ,wCACjC,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMf,GAAG,cAAcmB,KAAK,OAAO1B,UAAQ,EAAvD,kCAQF,qCACE,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMvF,EAAW+B,UAAU,cAAC,GAAD,MAAgB0D,KAAK,OAAO1B,UAAQ,EAAhF,oBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMvF,EAAW+B,UAAU,cAAC,GAAD,MAAmB0D,KAAK,OAAO1B,UAAQ,EAAnF,uBAGA,cAAC+H,GAAA,EAAD,CAASpE,YAAU,EAAC3D,UAAQ,EAA5B,gBACA,cAACa,EAAA,EAAD,CACEtK,QAASnE,EAAUwJ,UACnB8F,KAAK,OACL1B,UAAQ,EACR6B,MAAM,WACN5D,QAAQ,sBACRuD,QAASpP,EAAUyK,2B,qBCvC1B,SAASmL,GAAY9B,GAChC,MAA+BC,aAASD,EAAM1J,MAA9C,mBAAO4J,EAAP,KAAcC,EAAd,KAAoB4B,EAApB,KAEA,OACI,eAAC3B,GAAA,EAAKC,MAAN,CAAY/U,MAAO6U,EAAKG,WAAaH,EAAK7U,MAA1C,UACI,cAAC,KAAD,uCACQ4U,GACAF,GAFR,IAGIgC,SAAW9B,EAAMvP,OAAS,IAAIsB,KAAKiO,EAAMvP,QAAW,KACpDqL,SAAU,SAAArL,GAAK,OAAIoR,EAAQE,SAAStR,OAEvCwP,EAAKG,SAAWH,EAAK7U,MAClB,cAAC6S,GAAA,EAAD,CAAO5B,OAAK,EAACZ,MAAM,MAAnB,SAA0BwE,EAAK7U,QAC/B,Q,cCPD,SAAS4W,GAAelC,GACnC,MAA+BC,aAASD,EAAM1J,MAA9C,mBAAO4J,EAAP,KAAcC,EAAd,KAAoB4B,EAApB,KAEA,OACI,eAAC3B,GAAA,EAAKC,MAAN,CAAY/U,MAAO6U,EAAKG,WAAaH,EAAK7U,MAA1C,UACI,gCAAQ0U,EAAMO,QACd,cAAC4B,GAAA,EAAD,CACIC,WAAS,EACTC,QAASrC,EAAMqC,QACf1R,MAAOuP,EAAMvP,OAAS,KACtBqL,SAAU,SAACQ,EAAG8F,GAAJ,OAAUP,EAAQE,SAASK,EAAE3R,QACvC4R,OAAQ,kBAAMR,EAAQS,YAAW,IACjCxB,YAAahB,EAAMgB,cAEtBb,EAAKG,SAAWH,EAAK7U,MAClB,cAAC6S,GAAA,EAAD,CAAO5B,OAAK,EAACZ,MAAM,MAAnB,SAA0BwE,EAAK7U,QAC/B,QChBD,SAASmX,GAAWzC,GAC/B,MAAsBC,aAASD,EAAM1J,MAArC,mBAAO4J,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY/U,MAAO6U,EAAKG,WAAaH,EAAK7U,MAA1C,UACI,gCAAQ0U,EAAMO,QACd,oDAAcL,GAAYF,IACzBG,EAAKG,SAAWH,EAAK7U,MAClB,cAAC6S,GAAA,EAAD,CAAO5B,OAAK,EAACZ,MAAM,MAAnB,SAA0BwE,EAAK7U,QAC/B,QCpBT,IAAMoX,GAAkB,CAC3B,CAACvH,KAAM,SAAUxK,MAAO,UACxB,CAACwK,KAAM,UAAWxK,MAAO,WACzB,CAACwK,KAAM,OAAQxK,MAAO,QACtB,CAACwK,KAAM,OAAQxK,MAAO,QACtB,CAACwK,KAAM,QAASxK,MAAO,SACvB,CAACwK,KAAM,SAAUxK,MAAO,W,UCEb,SAASgS,GAAT,GAA6E,IAAD,IAAjD7I,gBAAiD,aAAhC/B,eAAgC,MAAtB,aAAsB,EACvF,OACI,cAAC6K,GAAA,EAAD,CAAQ9G,QAAQ,EAAMhC,SAAUA,EAAhC,SACI,cAACgG,EAAA,EAAD,CAAQ/H,QAASA,M,cCKd6B,gBAAS,WAEpB,IAAMjO,EAAUkX,eACT1N,EAAiBuE,IAAjBvE,cACAhD,EACiCgD,EADjChD,eAAgBG,EACiB6C,EADjB7C,eACfhB,EAAgC6D,EAAhC7D,aAAchB,EAAkB6E,EAAlB7E,eACfjD,EAAMyV,eAANzV,GAEP,EAAgC6R,mBAA6B,IAAI7P,GAAjE,mBAAO9B,EAAP,KAAiB0D,EAAjB,KAEMsQ,EAAmBC,KAAW,CAChCjS,MAAOiS,OAAaC,SAAS,kCAC7BhS,YAAa+R,OAAaC,SAAS,wCACnC/R,KAAM8R,OAAaC,WAAWsB,WAC9BvT,SAAUgS,OAAaC,WACvB7R,MAAO4R,OAAaC,WACpB9R,KAAM6R,OAAaC,aAuBvB,OApBApC,qBAAU,WACJhS,GAAIiE,EAAajE,GAAIV,MAAK,SAAAY,GAAQ,OAAI0D,EAAY,IAAI5B,EAAmB9B,SAC5E,CAACF,EAAIiE,IAkBJhB,EAAuB,cAACqS,GAAD,CAAkB5K,QAAQ,qBAGjD,eAACkG,GAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAAC3C,EAAA,EAAD,CAAQ7D,QAAQ,mBAAmB4G,KAAG,EAAClE,MAAO,CAACkB,MAAO,aACtD,cAAC,KAAD,CACI4F,iBAAkBA,EAClByB,oBAAkB,EAClBxC,cAAejT,EACfmT,SAAU,SAAAnN,GAAM,OAzB5B,SAA0BhG,GACtB,GAAKA,EAASF,GASViF,EAAe/E,GAAUZ,MAAK,kBAC1BhB,EAAQC,KAAR,sBAA4B2B,EAASF,YAV3B,CACd,IAAIgF,EAAW,2BACR9E,GADQ,IAEXF,GAAI4V,iBAER9Q,EAAeE,GAAa1F,MAAK,WAC7BhB,EAAQC,KAAR,sBAA4ByG,EAAYhF,SAkBpB6V,CAAiB3P,IAJzC,SAKK,gBAAGqN,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMb,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAAChB,GAAD,CAAciB,YAAY,QAAQ1K,KAAK,UACvC,cAACmM,GAAD,CAAYzB,YAAY,cAAc1K,KAAK,cAAc6M,KAAM,IAC/D,cAACjB,GAAD,CAAgBlB,YAAY,WAAW1K,KAAK,WAAW+L,QAASK,KAChE,cAACZ,GAAD,CACIsB,gBAAgB,OAChB9M,KAAK,OACL+M,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAAC3H,EAAA,EAAD,CAAQ7D,QAAQ,mBAAmB4G,KAAG,EAAClE,MAAO,CAACkB,MAAO,aACtD,cAACoE,GAAD,CAAciB,YAAY,OAAO1K,KAAK,SACtC,cAACyJ,GAAD,CAAciB,YAAY,QAAQ1K,KAAK,UACvC,cAACqE,EAAA,EAAD,CACAsE,SAAU4B,IAAiBc,IAAUD,EACjCrR,QAASwQ,EACTrC,QAAQ,QACR5D,UAAQ,EACRqG,KAAK,SACLlJ,QAAQ,WAEZ,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMf,GAAG,cAAcmE,QAAQ,QAAQyC,KAAK,SAASlJ,QAAQ,uB,oBC3ElF6B,gBAAS,YAAsD,IAAtBvB,EAAqB,EAArBA,WAC5CJ,EAAiByB,IAAjBzB,aAWR,OATAoH,qBAAU,WAIN,OAHIhH,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaoB,mBAElB,CAACpB,EAAcI,IAGd,qCACI,cAAC4F,GAAA,EAAD,CACIG,UAAU,SACVvC,SAAS,MACT/B,UAAQ,EACRW,MAAO,CAAE+I,OAAQ,OAAQ7H,MAAO,WAJpC,SAMI,cAACC,EAAA,EAAD,sCAEJ,eAACqC,GAAA,EAAD,CAASpC,UAAQ,EAAC0C,UAAQ,EAA1B,UACI,cAAC,KAAD,CACImC,SAAU,SAACnN,EAAD,OAAWkQ,EAAX,EAAWA,UAAX,OACNxL,EAAaqB,WAAW/F,GAAQ5G,MAAK,kBAAM8W,QAC/CjD,cAAe,CAAE5T,KAAM,IACvB2U,iBAAkBC,KAAW,CACzB5U,KAAM4U,OAAaC,aAL3B,SAQK,gBAAGZ,EAAH,EAAGA,aAAca,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOxK,KAAK,OAAZ,SACK,SAAC0J,GAAD,OACG,sBAAKvF,MAAO,CAAEI,SAAU,YAAxB,UACI,cAACiF,EAAA,EAAD,CAAQhE,OAAQ+E,IAChB,kDACIG,YAAY,mEACZmC,KAAM,GACFnD,EAAME,OAHd,IAIIwD,WAAY,SAAAlH,GACM,UAAVA,EAAE1Q,KAAmB0Q,EAAEmH,UAGb,UAAVnH,EAAE1Q,KAAoB0Q,EAAEmH,WACxBnH,EAAEC,iBACFiF,GAAWd,oBAU/C,cAACgD,GAAA,EAAQ1F,MAAT,UACKjG,EAAaC,SAASwF,KAAI,SAAA1E,GAAO,OAC9B,eAAC4K,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBtJ,IAAKvB,EAAQjJ,OAAS,qBACtC,eAAC6T,GAAA,EAAQzH,QAAT,WACI,cAACyH,GAAA,EAAQE,OAAT,CAAgB5J,GAAIkB,IAAMf,GAAE,oBAAerB,EAAQ7K,UAAnD,SACK6K,EAAQlJ,cAEb,cAAC8T,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoBhL,EAAQC,WAAlC,YAEJ,cAAC2K,GAAA,EAAQK,KAAT,CAAcxJ,MAAO,CAAEyJ,WAAY,YAAnC,SAAkDlL,EAAQpM,YATpDoM,EAAQ3L,kBChExC8W,GAAqB,CACvBzR,OAAQ,mBAGN0R,GAAyB,CAC3BvJ,SAAU,WACVwJ,OAAQ,KACRC,KAAM,KACN7I,MAAO,OACP8I,OAAQ,OACR5I,MAAO,SAOI/B,gBAAU,YAAoD,IAAD,IAAlBrM,EAAkB,EAAlBA,SACtD,EAA2EmM,IAApEvE,cAAgB1C,EAAvB,EAAuBA,iBAAkBpC,EAAzC,EAAyCA,QAASsC,EAAlD,EAAkDA,qBAClD,OACI,eAACsL,GAAA,EAAQC,MAAT,WACI,eAACD,GAAA,EAAD,CAAS1B,OAAK,EAACV,SAAS,MAAMpB,MAAO,CAAC+J,QAAS,KAA/C,UACKjX,EAASqF,aACN,cAACuL,GAAA,EAAD,CAAO1D,MAAO,CAACI,SAAU,WAAY4J,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAC/DC,QAAM,EAAChJ,MAAM,MAAM5D,QAAQ,cAEnC,cAAC+C,EAAA,EAAD,CAAOP,IAAG,iCAA4BhN,EAASiC,SAArC,QAAqD6M,OAAK,EAAC5B,MAAO0J,KAC5E,cAAClG,GAAA,EAAD,CAASxD,MAAO2J,GAAwB7H,OAAK,EAA7C,SACI,cAACtC,GAAA,EAAKiE,MAAN,UACI,cAACjE,GAAA,EAAD,UACI,eAACA,GAAA,EAAKkC,QAAN,WACI,cAACP,EAAA,EAAD,CACIJ,KAAK,OACLzD,QAASxK,EAASgC,MAClBkL,MAAO,CAACkB,MAAO,WAEnB,4BAAIzH,kBAAO3G,EAASmC,KAAO,iBAC3B,2CACc,iCAAQ,cAAC,IAAD,CAAM2K,GAAE,8BAAe9M,EAASuE,YAAxB,aAAe,EAAe3D,UAAtC,mBAAmDZ,EAASuE,YAA5D,aAAmD,EAAehC,+BAO5G,cAACmO,GAAA,EAAD,CAASM,UAAQ,EAAC1C,SAAS,SAA3B,SACKtO,EAASqE,OACN,qCACI,cAAC+I,EAAA,EAAD,CACIgB,MAAOpO,EAASqF,YAAc,QAAU,MACxC4L,QAAQ,OACRjC,OAAK,EACLxE,QAASxK,EAASqF,YAAc,uBAAyB,kBACzD0I,QAAS3I,EACTtC,QAASA,IAEb,cAACsK,EAAA,EAAD,CAAQsE,SAAU1R,EAASqF,YAAasH,GAAIkB,IAAMf,GAAE,kBAAa9M,EAASF,IAAMsO,MAAM,SAAS6C,QAAQ,QAAvG,6BAIJjR,EAASkE,QACT,cAACkJ,EAAA,EAAD,CAAQtK,QAASA,EAASiL,QAAS7I,EAAnC,+BAEA,cAACkI,EAAA,EAAD,CAAQsE,SAAU1R,EAASqF,YAAavC,QAASA,EAASiL,QAAS7I,EAAkBgI,MAAO,CAACkB,MAAO,WAApG,mCC7DL/B,gBAAS,YAAkD,IAAnBrM,EAAkB,EAAlBA,SACnD,OACI,eAAC0Q,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASpC,SAAS,MAAlB,SACI,eAACyD,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC2B,GAAA,EAAD,CAAM5B,KAAK,QAAQf,MAAO,CAACkB,MAAO,WAAYrF,KAAK,WAEvD,cAACgJ,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,4BAAIlO,EAASkC,qBAIzB,cAACwO,GAAA,EAAD,CAASpC,UAAQ,EAAjB,SACI,eAACyD,EAAA,EAAD,CAAMsF,cAAc,SAApB,UACI,cAACtF,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC2B,GAAA,EAAD,CAAM9G,KAAK,WAAWkF,KAAK,QAAQf,MAAO,CAACkB,MAAO,eAEtD,cAAC2D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACR,+BACCvH,kBAAO3G,EAASmC,KAAO,gCAKxB,cAACuO,GAAA,EAAD,CAASpC,UAAQ,EAAjB,SACI,eAACyD,EAAA,EAAD,CAAMsF,cAAc,SAApB,UACI,cAACtF,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC2B,GAAA,EAAD,CAAM9G,KAAK,SAASkF,KAAK,QAAQf,MAAO,CAACkB,MAAO,eAEpD,cAAC2D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,iCAAOlO,EAASqC,MAAhB,KAAyBrC,EAASoC,qBC/B3CiK,gBAAS,YAAyE,IAAD,IAArCrM,SAAWmE,EAA0B,EAA1BA,UAAWI,EAAe,EAAfA,KAC7E,OAAKJ,EAED,qCACI,eAACuM,GAAA,EAAD,CACIG,UAAU,SACV3D,MAAO,CAAE+I,OAAQ,OAAQ7H,MAAO,WAChCE,SAAS,MACTyC,WAAS,EACTxE,UAAQ,EALZ,UAOKpI,EAAUqL,OAPf,IAO6C,IAArBrL,EAAUqL,OAAe,SAAW,SAP5D,YASA,cAACkB,GAAA,EAAD,CAASpC,UAAQ,EAAjB,SACI,cAAC2B,GAAA,EAAD,CAAMqH,SAAO,EAACC,SAAO,EAArB,SACKpT,EAAUgM,KAAI,SAAAtL,GAAQ,OACvB,eAAC6H,GAAA,EAAD,CAAMQ,MAAO,CAAEI,SAAU,YAAzB,UACKzI,EAASjE,YAAT,OAAsB2D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM3D,WACzB,cAACgQ,GAAA,EAAD,CACI1D,MAAO,CAAEI,SAAU,YACnBc,MAAM,SACNgJ,OAAO,QAHX,kBAOJ,cAAC7J,EAAA,EAAD,CAAOU,KAAK,OAAOjB,IAAMnI,EAASrC,OAAS,qBACvC,eAACkK,GAAA,EAAKkC,QAAN,CAAcyI,cAAc,SAA5B,UACI,cAAC3K,GAAA,EAAK2B,OAAN,CAAa1B,GAAG,KAAhB,SACI,cAAC,IAAD,CAAMG,GAAE,oBAAejI,EAASjE,UAAhC,SAA6CiE,EAAStC,gBAEzDsC,EAASU,WACd,cAACmH,GAAA,EAAK8K,MAAN,CAAYtK,MAAO,CAAEkB,MAAO,UAA5B,4BAfoCvJ,EAASjE,oBAf9C,QCAZyL,gBAAS,WACpB,IAAOzE,EAAiBuE,IAAjBvE,cACkB5H,EAAiE4H,EAAnFhF,iBAA4BmB,EAAuD6D,EAAvD7D,aAAchB,EAAyC6E,EAAzC7E,eAAgB0C,EAAyBmC,EAAzBnC,sBAC1D3F,EAAMyV,eAANzV,GAOP,OALAgS,qBAAU,WAEN,OADIhS,GAAIiE,EAAajE,GACd,kBAAM2F,OACd,CAAC3F,EAAIiE,EAAc0B,IAElB1C,IAAmB/C,EAAiB,cAACoV,GAAD,IAGpC,eAACrD,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBlO,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsB8K,WAAY9K,EAASF,QAE/C,cAACiS,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC,GAAD,CAAyBlO,SAAUA,YCzBpC,SAASyX,KACpB,IACA,EAA4B9F,mBAAS,MAArC,mBAAOzT,EAAP,KAAekV,EAAf,KA0BA,OACI,qCACI,cAAC/E,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,yBACxB,cAACkG,GAAA,EAAD,UACI,eAACtD,EAAA,EAAOuD,MAAR,CAAc+G,OAAO,IAArB,UACI,cAACtK,EAAA,EAAD,CAAQW,QA7BxB,WACIjR,IAAMqC,IAAIwY,uBAA6BrO,OAAM,SAAAwK,GAAG,OAAIjQ,QAAQC,IAAIgQ,EAAInW,cA4BvB6M,QAAQ,YAAYwE,OAAK,EAAC4I,SAAO,IAClE,cAACxK,EAAA,EAAD,CAAQW,QA1BxB,WACIjR,IAAMqC,IAAIwY,yBAA+BrO,OAAM,SAAAwK,GAAG,OAAIjQ,QAAQC,IAAIgQ,EAAInW,cAyBvB6M,QAAQ,cAAcwE,OAAK,EAAC4I,SAAO,IACtE,cAACxK,EAAA,EAAD,CAAQW,QAXxB,WACIjR,IAAMwC,KAAKqY,iBAAwB,IAAIrO,OAAM,SAAAwK,GAAG,OAAIV,EAAUU,OAUVtJ,QAAQ,mBAAmBwE,OAAK,EAAC4I,SAAO,IAChF,cAACxK,EAAA,EAAD,CAAQW,QAxBxB,WACIjR,IAAMqC,IAAIwY,0BAAgCrO,OAAM,SAAAwK,GAAG,OAAIjQ,QAAQC,IAAIgQ,EAAInW,cAuBvB6M,QAAQ,eAAewE,OAAK,EAAC4I,SAAO,IACxE,cAACxK,EAAA,EAAD,CAAQW,QArBxB,WACIjR,IAAMqC,IAAIwY,0BAAgCrO,OAAM,SAAAwK,GAAG,OAAIjQ,QAAQC,IAAIgQ,EAAInW,cAoBtB6M,QAAQ,eAAewE,OAAK,EAAC4I,SAAO,IACzE,cAACxK,EAAA,EAAD,CAAQW,QAlBxB,WACIjR,IAAMqC,IAAIwY,2BAAiCrO,OAAM,SAAAwK,GAAG,OAAIjQ,QAAQC,IAAIgQ,OAiBxBtJ,QAAQ,WAAWwE,OAAK,EAAC4I,SAAO,SAGvE1Z,GACG,cAAC0V,GAAD,CAAkB1V,OAAQA,OC5C3B,SAAS2Z,KACpB,OACI,eAACnH,GAAA,EAAD,CAAS+C,aAAW,EAApB,UACI,eAACpF,EAAA,EAAD,CAAQP,MAAI,EAAZ,UACI,cAAC+B,GAAA,EAAD,CAAM9G,KAAK,WADf,6DAIA,cAAC2H,GAAA,EAAQoH,OAAT,UACI,cAAC1K,EAAA,EAAD,CAAQT,GAAIkB,IAAMf,GAAG,cAAc8K,SAAO,EAA1C,4CCPDvL,oBAAS,WAAwB,IAAD,IACrC7O,EAAgB2O,IAAhB3O,YAER,OACE,eAACiP,EAAA,EAAD,WACE,cAAC4B,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,iBACxB,cAAC6D,EAAA,EAAD,CAAQ+C,KAAG,EAACzE,GAAG,KAAKyB,MAAM,MAAM5D,QAAO,UAAEhN,EAAYO,aAAd,aAAE,EAAmBga,WAC3D,UAAAva,EAAYO,aAAZ,eAAmB8B,UAClB,eAAC6Q,GAAA,EAAD,WACE,cAACrC,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,cAAc0C,MAAO,CAACkB,MAAO,aACrD,sBAAMlB,MAAO,CAAEiB,UAAW,QAA1B,SAAqC3Q,EAAYO,MAAM8B,mB,UCVlDwM,gBAAS,WACtB,IAAQ7D,EAAe2D,IAAf3D,WAER,OACI,cAACwP,GAAA,EAAD,CAAO1N,KAAM9B,EAAW6B,MAAMC,KAAM2N,QAASzP,EAAWC,WAAYwF,KAAK,OAAzE,SACE,cAAC+J,GAAA,EAAMpJ,QAAP,UACKpG,EAAW6B,MAAMhL,Y,UCCfgN,gBAAS,YAAgD,IAAtB6L,EAAqB,EAArBA,YAC9C,EAAiD/L,IAA1C1B,aAAepJ,EAAtB,EAAsBA,QAASD,EAA/B,EAA+BA,cAC/B,OACI,cAAC,KAAD,CACI6R,cAAe,CAAC1Q,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAaoN,IAAG,OAAEtO,QAAF,IAAEA,OAAF,EAAEA,EAASsO,KACjEwD,SAAU,SAAAnN,GACN5E,EAAc4E,GAAQ5G,MAAK,WACvB8Y,GAAY,OAGpBlE,iBAAkBC,KAAW,CACzB1R,YAAa0R,OAAaC,aARlC,SAWK,gBAAEZ,EAAF,EAAEA,aAAca,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAzB,OACG,eAAC,KAAD,CAAMb,UAAU,UAAhB,UACI,cAACf,GAAD,CAAciB,YAAY,eAAe1K,KAAK,gBAC9C,cAACmM,GAAD,CAAYU,KAAM,EAAGnC,YAAY,eAAe1K,KAAK,QACrD,cAACqE,EAAA,EAAD,CACIC,UAAQ,EACRqG,KAAK,SACL5Q,QAASwQ,EACT9I,QAAQ,iBACRyG,QAAQ,QACRS,UAAWyC,IAAYC,aC9BhC/H,gBAAS,WACpB,IAAO5B,EAAgB0B,IAAhB1B,aACA0N,EAA0B1N,EAA1B0N,cAAe9W,EAAWoJ,EAAXpJ,QACtB,EAAgCsQ,oBAAS,GAAzC,mBAAO9O,EAAP,KAAiBqV,EAAjB,KAEA,OACI,cAACE,GAAA,EAAIC,KAAL,UACI,eAACtG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,UACI,cAACG,EAAA,EAAD,CAAQ4C,QAAQ,OAAOnD,KAAK,OAAOtD,QAAO,uBAAWnJ,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAC7D4V,GACG,cAAC/K,EAAA,EAAD,CACI6D,QAAQ,QACRjC,OAAK,EACLxE,QAAS3H,EAAW,SAAW,eAC/BkL,QAAS,kBAAMmK,GAAarV,SAIxC,cAACkP,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,SACKrL,EAAW,cAAC,GAAD,CAAiBqV,YAAaA,IAAkB,sBAAMhL,MAAO,CAACyJ,WAAY,YAA1B,gBAAwCtV,QAAxC,IAAwCA,OAAxC,EAAwCA,EAASsO,gBClB3H2I,GAAQ,CACZ,CAAEC,SAAU,gBAAiBC,KAAM,CAAEja,IAAK,WAC1C,CAAEga,SAAU,cAAeC,KAAM,CAAEja,IAAK,SACxC,CAAEga,SAAU,UAAWC,KAAM,CAAEja,IAAK,aAGvB8N,gBAAS,WACtB,IAAQ5B,EAAiB0B,IAAjB1B,aACAzC,EACNyC,EADMzC,mBAAoB3G,EAC1BoJ,EAD0BpJ,QAAS+F,EACnCqD,EADmCrD,kBAAmBD,EACtDsD,EADsDtD,eAExD2K,qBAAU,WACR9J,EAAmB3G,EAAST,YAC3B,CAACoH,EAAoB3G,IAQxB,OACE,cAAC+W,GAAA,EAAIC,KAAL,CAAUvV,QAASsE,EAAnB,SACE,eAAC2K,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACE,cAACG,EAAA,EAAD,CAAQ4C,QAAQ,OAAOnD,KAAK,WAAWtD,QAAS,iBAElD,eAACuH,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACE,cAACkK,GAAA,EAAD,CACEE,MAAOA,GACPG,KAAM,CAAE1H,WAAW,EAAMpD,UAAU,GACnC+K,YAAa,SAACzJ,EAAGzS,GAAJ,OAhBC,SAACyS,EAAmBzS,GAC1CwL,EACE3G,EAAST,SACT0X,GAAM9b,EAAKmc,aAAuBH,KAAKja,KAaPqa,CAAgB3J,EAAGzS,MAE/C,uBACA,cAAC6S,GAAA,EAAKsB,MAAN,CAAYkI,YAAa,EAAzB,SACG1R,EAAegJ,KAAI,SAACnQ,GAAD,OAClB,eAACqP,GAAA,EAAD,CACE1C,GAAIkB,IACJf,GAAE,sBAAiB9M,EAASF,IAF9B,UAKE,cAACyN,EAAA,EAAD,CACEP,IAAG,iCAA4BhN,EAASiC,SAArC,QACHiL,MAAO,CAAEqE,UAAW,IAAKuH,UAAW,WAEtC,eAACzJ,GAAA,EAAKT,QAAN,WACE,cAACS,GAAA,EAAKhB,OAAN,CAAawC,UAAU,SAAvB,SAAiC7Q,EAASgC,QAC1C,eAACqN,GAAA,EAAK0J,KAAN,CAAWlI,UAAU,SAArB,UACE,8BAAMlK,kBAAO,IAAIjC,KAAK1E,EAASmC,MAAO,YACtC,8BAAMwE,kBAAO,IAAIjC,KAAK1E,EAASmC,MAAO,oBAVrCnC,EAASF,oBCxCfuM,gBAAU,WACrB,IAAO5B,EAAgB0B,IAAhB1B,aACApJ,EAAqDoJ,EAArDpJ,QAAS2F,EAA4CyD,EAA5CzD,WAAYC,EAAgCwD,EAAhCxD,kBAAmBC,EAAauD,EAAbvD,UAE/C,OACI,cAACkR,GAAA,EAAIC,KAAL,CAAUvV,QAASmE,EAAnB,SACI,eAAC8K,EAAA,EAAD,CAAMiH,KAAM,GAAZ,UACI,cAACjH,EAAA,EAAKC,OAAN,UACI,cAAC3D,EAAA,EAAD,CAAQ4C,QAAQ,OAAOnD,KAAK,OAAOtD,QAAuB,IAAdtD,EAAA,kCAAsC7F,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBAAyElB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASkB,YAAlF,qBAEhD,cAACwP,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACmB,GAAA,EAAKsB,MAAN,CAAYkI,YAAa,EAAzB,SACK7R,EAAWmJ,KAAI,SAAA9O,GAAO,OACnB,cAAC+N,GAAD,CAAoC/N,QAASA,GAA3BA,EAAQT,yB,UCXvC,SAASqY,GAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,SACnCC,EAAW,CACblD,OAAQ,kBACRmD,YAAa,OACbC,aAAc,MACdC,WAAY,OACZzI,UAAW,SACXmG,OAAQ,KAORuC,EAASC,uBAAY,SAAAC,GACzBP,EAASO,EAActJ,KAAI,SAACrP,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1D4Y,QAASC,IAAIC,gBAAgB9Y,WAEhC,CAACoY,IACJ,EAAoDW,aAAY,CAACN,WAA1DO,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACE,gDAASF,KAAT,IAAyB5M,MAAO8M,EAAY,2BAAOb,GAZlC,CACbC,YAAa,UAW2DD,EAA5E,UACE,qCAAWY,MACX,cAAClK,GAAA,EAAD,CAAM9G,KAAK,SAASkF,KAAK,SACzB,cAACI,EAAA,EAAD,CAAQ7D,QAAQ,wB,qBCxBP,SAASyP,GAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,WACtD,OACI,cAAC,KAAD,CACAnN,IAAKkN,EACLhN,MAAO,CAAC8J,OAAQ,IAAK9I,MAAO,QAC5BkM,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,MCX9B,SAASC,GAAT,GAA2D,IAA/B9X,EAA8B,EAA9BA,QAASjC,EAAqB,EAArBA,YAChD,EAA0B8Q,mBAAc,IAAxC,mBAAOkJ,EAAP,KAAc3B,EAAd,KAEA,EAA8BvH,qBAA9B,mBAAOgJ,EAAP,KAAgBR,EAAhB,KAcA,OANArI,qBAAU,WACN,OAAO,WACH+I,EAAMvX,SAAQ,SAACxC,GAAD,OAAe6Y,IAAImB,gBAAgBha,EAAK4Y,eAE3D,CAACmB,IAGA,eAAC9I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACG,EAAA,EAAD,CAAQnB,MAAO,CAACkB,MAAO,WAAYgD,KAAG,EAAC5G,QAAQ,uBAC/C,cAACyO,GAAD,CAAqBC,SAAUA,OAEnC,cAACnH,EAAA,EAAKC,OAAN,CAAa9D,MAAO,IACpB,eAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACG,EAAA,EAAD,CAAQ+C,KAAG,EAAClE,MAAO,CAACkB,MAAO,WAAY5D,QAAQ,0BAC9CqQ,GAASA,EAAMrL,OAAS,GACrB,cAACyK,GAAD,CAAoBE,WAAYA,EAAYD,aAAcW,EAAM,GAAGnB,aAG3E,cAAC3H,EAAA,EAAKC,OAAN,CAAa9D,MAAO,IACpB,eAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACG,EAAA,EAAD,CAAQ+C,KAAG,EAAClE,MAAO,CAACkB,MAAO,WAAY5D,QAAQ,8BAC9CqQ,GAASA,EAAMrL,OAAS,GACrB,qCACI,qBAAK+D,UAAU,cAAcrG,MAAO,CAACqE,UAAU,IAAKwJ,SAAU,YAC9D,eAAC3N,EAAA,EAAOuD,MAAR,CAAc+G,OAAQ,EAAtB,UACI,cAACtK,EAAA,EAAD,CAAQtK,QAASA,EAASiL,QAhClD,WACQ4M,GACAA,EAAQK,mBAAmBC,QAAO,SAAAC,GAAI,OAAIra,EAAYqa,OA8BK7N,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQsE,SAAU5O,EAASiL,QAAS,kBAAMmL,EAAS,KAAKpL,KAAK,sBCrC1EzB,oBAAS,YAA0C,IAAD,EAAjBhL,EAAiB,EAAjBA,QAC5C,EAAoG8K,IAA7F1B,aAAe0N,EAAtB,EAAsBA,cAAepR,EAArC,EAAqCA,UAAWlG,EAAhD,EAAgDA,YAAaK,EAA7D,EAA6DA,aAAc4B,EAA3E,EAA2EA,QAAS3B,EAApF,EAAoFA,YACpF,EAAwCwQ,oBAAS,GAAjD,mBAAOwJ,EAAP,KAAqBC,EAArB,KACA,EAA4BzJ,mBAAS,IAArC,mBAAO0J,EAAP,KAAeC,EAAf,KAaA,OACI,cAAClD,GAAA,EAAIC,KAAL,UACI,eAACtG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAACG,EAAA,EAAD,CAAQ4C,QAAQ,OAAOnD,KAAK,QAAQtD,QAAQ,WAC3C2N,GACG,cAAC/K,EAAA,EAAD,CACImO,SAAS,QACTvM,OAAK,EACLxE,QAAS2Q,EAAe,SAAW,YACnCpN,QAAS,kBAAMqN,GAAiBD,SAI5C,cAACpJ,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACUiN,EACE,cAACP,GAAD,CAAmB/Z,YA3B3C,SAA2BC,GACvBD,EAAYC,GAAM1B,MAAK,kBAAMgc,GAAgB,OA0B0BtY,QAASiE,IAE5D,cAACsI,GAAA,EAAKsB,MAAN,CAAYkI,YAAa,EAAzB,mBACCxX,EAAQmG,cADT,aACC,EAAgB2I,KAAI,SAAA5I,GAAK,OACtB,eAAC8H,GAAA,EAAD,WACI,cAAC9B,EAAA,EAAD,CAAOP,IAAKzF,EAAMrI,IAAK+N,IAAI,iCAC1BkL,GACG,eAAC/K,EAAA,EAAOuD,MAAR,CAAc7B,OAAK,EAAC4I,OAAQ,EAA5B,UACI,cAACtK,EAAA,EAAD,CACI4B,OAAK,EACLZ,MAAM,QACN5D,QAAQ,OACRzB,KAAM,OAASxB,EAAMzH,GACrBgD,QAASuY,IAAW,OAAS9T,EAAMzH,IAAMgD,EACzC4O,SAAUnK,EAAME,OAChBsG,QAAS,SAAAkB,GAAC,OAvCtD,SAA4B1H,EAAc0H,GACtCqM,EAAUrM,EAAEuM,cAAczS,MAC1B7H,EAAaqG,GAqCyCkU,CAAmBlU,EAAO0H,MAE5C,cAAC7B,EAAA,EAAD,CACItK,QAASuY,IAAW9T,EAAMzH,IAAMgD,EAChCkM,OAAK,EACLZ,MAAM,MACNN,KAAK,QACLC,QAAS,SAAAkB,GAAC,OA1CtD,SAA2B1H,EAAc0H,GACrCqM,EAAUrM,EAAEuM,cAAczS,MAC1B5H,EAAYoG,GAwC0CmU,CAAkBnU,EAAO0H,IACvCyC,SAAUnK,EAAME,OAChBsB,KAAMxB,EAAMzH,UApBjByH,EAAMzH,mBCjClCuM,gBAAS,YAA2C,IAAlBhL,EAAiB,EAAjBA,QACtCoJ,EAAgB0B,IAAhB1B,aACD6N,EAAQ,CACV,CAACC,SAAU,QAAS5E,OAAQ,kBAAM,cAAC,GAAD,MAClC,CAAC4E,SAAU,SAAU5E,OAAQ,kBAAM,cAAC,GAAD,CAAetS,QAASA,MAC3D,CAACkX,SAAU,SAAU5E,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAAC4E,SAAU,YAAa5E,OAAQ,kBAAM,cAAC,GAAD,MACtC,CAAC4E,SAAU,YAAa5E,OAAQ,kBAAM,cAAC,GAAD,OAG1C,OACI,cAACyE,GAAA,EAAD,CACIK,KAAM,CAAC3J,OAAO,EAAMd,UAAU,GAC9B2N,aAAa,QACbrD,MAAOA,EACPI,YAAa,SAACzJ,EAAGzS,GAAJ,OAAaiO,EAAapD,aAAa7K,EAAKmc,mB,UCnBtDtM,gBAAS,YAA0C,IAAlBhL,EAAiB,EAAjBA,QAC5C,OACI,cAACqP,GAAA,EAAD,UACI,eAACqB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACxB,GAAA,EAAKiE,MAAN,UACI,eAACjE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQjB,IAAK3L,EAAQmB,OAAS,qBACtD,cAACkK,GAAA,EAAKkC,QAAN,CAAcgN,cAAc,SAA5B,SACI,cAACvN,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAASnJ,EAAQkB,uBAKjD,eAACwP,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,eAAC2N,GAAA,EAAUlL,MAAX,CAAiB+G,OAAQ,EAAzB,UACI,cAACmE,GAAA,EAAD,CAAW7I,MAAM,YAAY5P,MAAO/B,EAAQmE,iBAC5C,cAACqW,GAAA,EAAD,CAAW7I,MAAM,YAAY5P,MAAO/B,EAAQwG,oBAEhD,cAACyM,GAAA,EAAD,IACA,cAAC,GAAD,CAAcjT,QAASA,eCrB5BgL,gBAAS,WACpB,IAAOzL,EAAY2U,eAAZ3U,SACA6J,EAAgB0B,IAAhB1B,aACA3D,EAAsD2D,EAAtD3D,eAAgBQ,EAAsCmD,EAAtCnD,YAAajG,EAAyBoJ,EAAzBpJ,QAASgG,EAAgBoD,EAAhBpD,aAS7C,OAPAyK,qBAAU,WAEN,OADAxK,EAAY1G,GACL,WACHyG,EAAa,MAElB,CAACC,EAAa1G,EAAUyG,IAEvBP,EAAuB,cAACsO,GAAD,CAAkB5K,QAAQ,uBAGjD,cAACuH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACK7M,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCtBlC,SAASya,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,mBACtD5H,EAAelI,IAA3BxN,UAAY0V,WACnB,OACI,cAAC,KAAD,2BACQ4H,GADR,IAEItI,OAAQ,SAAClB,GAAD,OAAW4B,EAAa,cAAC0H,EAAD,eAAetJ,IAAY,cAAC,KAAD,CAAU3F,GAAG,UCiDrET,oBA1Cf,WACE,IAAM6P,EAAWC,eACjB,EAAiChQ,IAA1B3O,EAAP,EAAOA,YAAamB,EAApB,EAAoBA,UAUpB,OARAmT,qBAAU,WACJtU,EAAYF,MACdqB,EAAUkK,UAAUuT,SAAQ,kBAAM5e,EAAY2M,kBAE9CxL,EAAUqK,yBAAyB5J,MAAK,kBAAM5B,EAAY2M,oBAE3D,CAAC3M,EAAamB,IAEZnB,EAAY0M,UAGf,qCACE,cAAC,IAAD,CAAgBoD,SAAS,eAAe+O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOxP,OAAK,EAACyP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACN3I,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAAClH,EAAA,EAAD,CAAWS,MAAO,CAAEiB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAAC2N,GAAD,CAAcjP,OAAK,EAACyP,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAAS3d,KAC5B,cAACud,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWvE,KACxC,cAAC,KAAD,CAAO6E,KAAK,gBAAgBN,UAAWY,KACvC,cAACd,GAAD,CAAcE,UAAWnE,mBApBJ,cAACzC,GAAD,CAAkB5K,QAAQ,sBCjBhDqS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3d,MAAK,YAAkD,IAA/C4d,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uCCNC,SAASO,KACtB,IAAQC,EAAanB,eAAbmB,SAMR,OAJAxL,qBAAU,WACRpJ,OAAO6U,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAMlf,GAAUof,eAEvBC,IAAS9J,OACP,cAAC1H,EAAayR,SAAd,CAAuBta,MAAO7F,EAA9B,SACE,cAAC,IAAMogB,WAAP,UACI,eAAC,KAAD,CAAQvf,QAASA,GAAjB,UACE,cAACif,GAAD,IACA,cAAC,GAAD,WAIRO,SAASC,eAAe,SAM1BhB,O","file":"static/js/main.ddf576b9.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests\r\n        .post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = ''\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n;}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"app/models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import agent from \"app/api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"app/models/profile\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    currentUserProfile: Profile | null = null;\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab: number = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(() => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else\r\n                {\r\n                    this.followings = [];\r\n                }\r\n            })\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {   \r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n        const activities = await agent.Profiles.listActivities(username,\r\n       predicate!);\r\n        runInAction(() => {\r\n            this.userActivities = activities;\r\n            this.loadingActivities = false;\r\n        });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }}\r\n\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    } \r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore\r\n    userStore: UserStore\r\n    modalStore: ModalStore\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}export const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store)\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"app/models/serverError\";\r\nimport { makeAutoObservable, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Charleston Event Tracker\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25, color: '#002855' }}>\r\n                <Header icon='filter' attached content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { useStore } from 'app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{width: '100%'}}>\r\n            <Button \r\n                fluid \r\n                style={{color: '#002855'}} \r\n                content={profile.following ? 'Following' : 'Not Following'} \r\n            />\r\n        </Reveal.Content>\r\n        <Reveal.Content hidden style={{width: '100%'}}>\r\n            <Button \r\n                basic\r\n                fluid \r\n                color={profile.following ? 'red' : 'green'} \r\n                content={profile.following ? 'Unfollow' : 'Follow'} \r\n                loading={loading}\r\n                onClick={(e) => handleFollow(e, profile.username)}\r\n            />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    )\r\n})","import { Profile } from 'app/models/profile';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Image, Icon } from 'semantic-ui-react';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card>\r\n            <Image as={Link} to={`/profiles/${profile.username}`} src={profile.image || '/assets/user.png'} />\r\n            <Card.Content as={Link} to={`/profiles/${profile.username}`}>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}","import { Profile } from \"app/models/profile\";\r\nimport ProfileCard from \"features/profiles/ProfileCard\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        attendeeborder: 'orange',\r\n        borderWidth: 3,\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable \r\n                    key={attendee.username} \r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))};\r\n        </List>\r\n    )\r\n})","import { Activity } from \"app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image ||'/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                        {activity.isHost && (\r\n                            <Item.Description>\r\n                                <Label basic color='orange'>\r\n                                    You are hosting this activity.\r\n                                </Label>\r\n                            </Item.Description>\r\n                        )}\r\n                        {activity.isGoing && !activity.isHost && (\r\n                            <Item.Description>\r\n                                <Label basic color='orange'>\r\n                                    You are going to this activity.\r\n                                </Label>\r\n                            </Item.Description>\r\n                        )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock'/>{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/>{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    style={{color: '#002855'}}\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { useStore } from \"app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n  const { activityStore } = useStore();\r\n  const { groupedActivities } = activityStore;\r\n\r\n  return (\r\n    <>\r\n      {groupedActivities.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Header sub style={{color: '#002855'}}>\r\n            {group}\r\n          </Header>\r\n          {activities.map((activity) => (\r\n            <ActivityListItem key={activity.id} activity={activity} />\r\n          ))}\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n});\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInputs(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field } {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import MyTextInputs from \"app/common/form/MyTextInputs\";\r\nimport { useStore } from \"app/stores/store\";\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\n\r\nexport default observer(function LoginForm() {\r\n  const { userStore } = useStore();\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\", error: null}}\r\n      onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n            setErrors({error: 'Invalid email or password'}))}\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors }) => (\r\n        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n          <Header as='h2' content='Login to Charleston Event Tracker' style={{color: '#002855'}} textAlign='center' />\r\n          <MyTextInputs name=\"email\" placeholder=\"Email\" />\r\n          <MyTextInputs\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n          />\r\n          <ErrorMessage \r\n            name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n          />\r\n          <Button loading={isSubmitting} positive content=\"Login\" type=\"submit\" fluid />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import MyTextInputs from \"app/common/form/MyTextInputs\";\r\nimport { useStore } from \"app/stores/store\";\r\nimport ValidationErrors from \"features/errors/ValidationErrors\";\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport * as Yup from 'yup';\r\n\r\nexport default observer(function RegisterForm() {\r\n  const { userStore } = useStore();\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayName: '', username: '', email: \"\", password: \"\", error: null}}\r\n      onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n            setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n        <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n          <Header as='h2' content='Sign up to Charleston Event Tracker' style={{color: '#002855'}} textAlign='center' />\r\n          <MyTextInputs name=\"displayName\" placeholder=\"Display Name\" />\r\n          <MyTextInputs name=\"username\" placeholder=\"Username\" />\r\n          <MyTextInputs name=\"email\" placeholder=\"Email\" />\r\n          <MyTextInputs\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n          />\r\n          <ErrorMessage \r\n            name='error' render={() => \r\n            <ValidationErrors errors={errors.error} />}\r\n          />\r\n          <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type=\"submit\" fluid />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Charleston Event Tracker\r\n                </Header>\r\n                {userStore.isLoggedIn \r\n                ? \r\n                (\r\n                  <>\r\n                    <Header as='h2' inverted content='Welcome to Charleston Event Tracker' />\r\n                    <Button as={Link} to='/activities' size='huge' inverted>\r\n                      Go to Activities!\r\n                    </Button>\r\n                  </>\r\n\r\n                ) \r\n                : \r\n                (\r\n                  <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                      Login!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                      Register!\r\n                    </Button>\r\n                    <Divider horizontal inverted>Or</Divider>\r\n                    <Button \r\n                      loading={userStore.fbLoading}\r\n                      size='huge'\r\n                      inverted\r\n                      color='facebook'\r\n                      content='Login with Facebook'\r\n                      onClick={userStore.facebookLogin}\r\n                      />\r\n                    </>\r\n\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\"\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInputs(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field } {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n\r\n}","import MyDateInput from \"app/common/form/MyDateInput\";\r\nimport MySelectInputs from \"app/common/form/MySelectInputs\";\r\nimport MyTextArea from \"app/common/form/MyTextArea\";\r\nimport MyTextInputs from \"app/common/form/MyTextInputs\";\r\nimport { categoryOptions } from \"app/common/options/categoryOptions\";\r\nimport LoadingComponent from \"app/layout/LoadingComponent\";\r\nimport { ActivityFormValues } from \"app/models/activity\";\r\nimport { useStore } from \"app/stores/store\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport * as Yup from 'yup';\r\n\r\nexport default observer(function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity,\r\n            loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        date: Yup.string().required().nullable(),\r\n        category: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n\r\n    useEffect(() => {\r\n      if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`);\r\n            });\r\n        } else {\r\n            updateActivity(activity).then(() => \r\n                history.push(`/activities/${activity.id}`))\r\n        }\r\n\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading Activity'/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub style={{color: '#002855'}} />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInputs placeholder='Title' name='title' />\r\n                        <MyTextArea placeholder='Description' name='description' rows={3} />\r\n                        <MySelectInputs placeholder='Category' name='category' options={categoryOptions} />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' \r\n                        />\r\n                        <Header content='Location Details' sub style={{color: '#002855'}} />\r\n                        <MyTextInputs placeholder='City' name='city' />\r\n                        <MyTextInputs placeholder='Venue' name='venue' />\r\n                        <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit' \r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                style={{ border: 'none', color: '#002855' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { format } from \"date-fns\";\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from 'app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'} \r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle} \r\n                            loading={loading}\r\n                        />\r\n                        <Button disabled={activity.isCancelled} as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} style={{color: '#002855'}}>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { format } from \"date-fns\";\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' style={{color: '#002855'}} name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' style={{color: '#002855'}}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' style={{color: '#002855'}}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from 'app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none', color: '#002855' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                    <Item style={{ position: 'relative' }} key={attendee.username} >\r\n                        {attendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                        <Image size='tiny' src={ attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\n// keeping for dev purposes only - this is used to check if errors still work as they should. This will be handy as the site grows\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'error/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'error/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'error/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'error/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { useStore } from \"app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\n\r\nexport default observer(function ServerError() {\r\n  const { commonStore } = useStore();\r\n\r\n  return (\r\n    <Container>\r\n      <Header as=\"h1\" content=\"Server Error\" />\r\n      <Header sub as=\"h5\" color=\"red\" content={commonStore.error?.message} />\r\n      {commonStore.error?.details && (\r\n        <Segment>\r\n          <Header as=\"h4\" content=\"Stack trace\" style={{color: '#002855'}} />\r\n          <code style={{ marginTop: \"10px\" }}>{commonStore.error.details}</code>\r\n        </Segment>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n","import { useStore } from \"app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\n\r\nexport default observer(function ModalContainer() {\r\n  const { modalStore } = useStore();\r\n\r\n  return (\r\n      <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\r\n        <Modal.Content>\r\n            {modalStore.modal.body}\r\n        </Modal.Content>\r\n      </Modal>\r\n  )\r\n});\r\n","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInputs from \"../../app/common/form/MyTextInputs\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInputs placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n  { menuItem: \"Future Events\", pane: { key: \"future\" } },\r\n  { menuItem: \"Past Events\", pane: { key: \"past\" } },\r\n  { menuItem: \"Hosting\", pane: { key: \"hosting\" } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n  const { profileStore } = useStore();\r\n  const { loadUserActivities, profile, loadingActivities, userActivities } =\r\n    profileStore;\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(\r\n      profile!.username,\r\n      panes[data.activeIndex as number].pane.key\r\n    );\r\n  };\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated=\"left\" icon=\"calendar\" content={\"Activities\"} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: UserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign=\"center\">\r\n                    <div>{format(new Date(activity.date), \"do LLL\")}</div>\r\n                    <div>{format(new Date(activity.date), \"h:mm a\")}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n});\r\n","import { useStore } from 'app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer( function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid idth={16}>\r\n                <Grid.Column>\r\n                    <Header floated='left' icon='user' content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        PaddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green',\r\n    }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size=\"huge\" />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n        src={imagePreview}\r\n        style={{height: 200, width: '100%'}}\r\n        initialAspectRatio={1}\r\n        aspectRatio={1}\r\n        preview='.img-preview'\r\n        guides={false}\r\n        viewMode={1}\r\n        autoCropArea={1}\r\n        background={false}\r\n        onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropZone';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    \r\n    const [cropper, setCropper] = useState<Cropper>();\r\n    \r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header style={{color: '#002855'}} sub content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropZone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub style={{color: '#002855'}} content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub style={{color: '#002855'}} content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && \r\n                    <>\r\n                        <div className='img-preview' style={{minHeight:200, overflow: 'hidden'}} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import PhotoUploadWidget from 'app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from 'app/models/profile';\r\nimport { useStore } from 'app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploading, uploadPhoto, setMainPhoto, loading, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floasted='right' \r\n                            basic \r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                         {addPhotoMode ? (\r\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                        ): (\r\n                            <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} alt='picture within photo gallery' />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='main'\r\n                                                name={'main' + photo.id}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                disabled={photo.isMain}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                loading={target === photo.id && loading} \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash' \r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>  \r\n                            ))}\r\n                        </Card.Group>\r\n                        )} \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Profile } from 'app/models/profile';\r\nimport { useStore } from 'app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { Profile } from 'app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticleAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import LoadingComponent from 'app/layout/LoadingComponent';\r\nimport { useStore } from 'app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore\r\n    \r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                    <>\r\n                        <ProfileHeader profile={profile!} /> \r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <PrivateRoute component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from 'app/stores/store';\nimport {  Router } from 'react-router-dom';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from 'app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <React.StrictMode>\n        <Router history={history}>\n          <ScrollToTop />\n          <App />\n        </Router>\n    </React.StrictMode>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}